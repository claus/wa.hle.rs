---
import styles from './LazyImage.module.scss';

interface Props {
    src: string;
    alt?: string;
    className?: string;
}

const { src, alt, className } = Astro.props;
---

<x-lazy-image>
    <img data-src={src} class:list={[styles.image, className]} alt={alt ?? ''} decoding="async" />
</x-lazy-image>

<script>
    class LazyImage extends HTMLElement {
        private img: HTMLImageElement;
        private observer: IntersectionObserver;

        constructor() {
            super();
            this.img = this.querySelector('img')!;
            this.observer = new IntersectionObserver(this.handleIntersection);
        }

        connectedCallback() {
            this.observer.observe(this.img);
        }

        disconnectedCallback() {
            this.observer.disconnect();
            this.img.removeEventListener('load', this.handleLoad);
        }

        handleIntersection: IntersectionObserverCallback = ([entry]) => {
            if (entry.isIntersecting) {
                this.observer.disconnect();
                this.img.src = this.img.dataset.src!;
                if (this.img.complete) {
                    this.img.classList.add('loaded');
                } else {
                    this.img.addEventListener('load', this.handleLoad);
                }
                delete this.img.dataset.src;
            }
        };

        handleLoad = () => {
            this.img.classList.add('loaded');
            this.img.removeEventListener('load', this.handleLoad);
        };
    }

    if (!customElements.get('x-lazy-image')) {
        customElements.define('x-lazy-image', LazyImage);
    }
</script>
